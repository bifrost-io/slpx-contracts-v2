{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\nimport {Panic} from \"../Panic.sol\";\nimport {SafeCast} from \"./SafeCast.sol\";\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\n     *\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\n     * one branch when needed, making this function more expensive.\n     */\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\n        unchecked {\n            // branchless ternary works because:\n            // b ^ (a ^ b) == a\n            // b ^ 0 == b\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a > b, a, b);\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return ternary(a < b, a, b);\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n\n        // The following calculation ensures accurate ceiling division without overflow.\n        // Since a is non-zero, (a - 1) / b will not overflow.\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\n        // when a = type(uint256).max and b = 1.\n        unchecked {\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\n        }\n    }\n\n    /**\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     *\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\n    }\n\n    /**\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\n     *\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\n     *\n     * If the input value is not inversible, 0 is returned.\n     *\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\n     */\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\n        unchecked {\n            if (n == 0) return 0;\n\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\n            // ax + ny = 1\n            // ax = 1 + (-y)n\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\n\n            // If the remainder is 0 the gcd is n right away.\n            uint256 remainder = a % n;\n            uint256 gcd = n;\n\n            // Therefore the initial coefficients are:\n            // ax + ny = gcd(a, n) = n\n            // 0a + 1n = n\n            int256 x = 0;\n            int256 y = 1;\n\n            while (remainder != 0) {\n                uint256 quotient = gcd / remainder;\n\n                (gcd, remainder) = (\n                    // The old remainder is the next gcd to try.\n                    remainder,\n                    // Compute the next remainder.\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\n                    // where gcd is at most n (capped to type(uint256).max)\n                    gcd - remainder * quotient\n                );\n\n                (x, y) = (\n                    // Increment the coefficient of a.\n                    y,\n                    // Decrement the coefficient of n.\n                    // Can overflow, but the result is casted to uint256 so that the\n                    // next value of y is \"wrapped around\" to a value between 0 and n - 1.\n                    x - y * int256(quotient)\n                );\n            }\n\n            if (gcd != 1) return 0; // No inverse exists.\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\n        }\n    }\n\n    /**\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\n     *\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\n     *\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\n     */\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\n        unchecked {\n            return Math.modExp(a, p - 2, p);\n        }\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\n     *\n     * Requirements:\n     * - modulus can't be zero\n     * - underlying staticcall to precompile must succeed\n     *\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\n     * interpreted as 0.\n     */\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\n        (bool success, uint256 result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\n     * to operate modulo 0 or if the underlying precompile reverted.\n     *\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\n     * of a revert, but the result may be incorrectly interpreted as 0.\n     */\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\n        if (m == 0) return (false, 0);\n        assembly (\"memory-safe\") {\n            let ptr := mload(0x40)\n            // | Offset    | Content    | Content (Hex)                                                      |\n            // |-----------|------------|--------------------------------------------------------------------|\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\n            mstore(ptr, 0x20)\n            mstore(add(ptr, 0x20), 0x20)\n            mstore(add(ptr, 0x40), 0x20)\n            mstore(add(ptr, 0x60), b)\n            mstore(add(ptr, 0x80), e)\n            mstore(add(ptr, 0xa0), m)\n\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\n            // so we can use the memory scratch space located at offset 0.\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\n            result := mload(0x00)\n        }\n    }\n\n    /**\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\n     */\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\n        (bool success, bytes memory result) = tryModExp(b, e, m);\n        if (!success) {\n            Panic.panic(Panic.DIVISION_BY_ZERO);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\n     */\n    function tryModExp(\n        bytes memory b,\n        bytes memory e,\n        bytes memory m\n    ) internal view returns (bool success, bytes memory result) {\n        if (_zeroBytes(m)) return (false, new bytes(0));\n\n        uint256 mLen = m.length;\n\n        // Encode call args in result and move the free memory pointer\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\n\n        assembly (\"memory-safe\") {\n            let dataPtr := add(result, 0x20)\n            // Write result on top of args to avoid allocating extra memory.\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\n            // Overwrite the length.\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\n            mstore(result, mLen)\n            // Set the memory pointer after the returned data.\n            mstore(0x40, add(dataPtr, mLen))\n        }\n    }\n\n    /**\n     * @dev Returns whether the provided byte array is zero.\n     */\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\n        for (uint256 i = 0; i < byteArray.length; ++i) {\n            if (byteArray[i] != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\n     * using integer operations.\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        unchecked {\n            // Take care of easy edge cases when a == 0 or a == 1\n            if (a <= 1) {\n                return a;\n            }\n\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\n            //\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\n            // bigger than any uint256.\n            //\n            // By noticing that\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\n            // to the msb function.\n            uint256 aa = a;\n            uint256 xn = 1;\n\n            if (aa >= (1 << 128)) {\n                aa >>= 128;\n                xn <<= 64;\n            }\n            if (aa >= (1 << 64)) {\n                aa >>= 64;\n                xn <<= 32;\n            }\n            if (aa >= (1 << 32)) {\n                aa >>= 32;\n                xn <<= 16;\n            }\n            if (aa >= (1 << 16)) {\n                aa >>= 16;\n                xn <<= 8;\n            }\n            if (aa >= (1 << 8)) {\n                aa >>= 8;\n                xn <<= 4;\n            }\n            if (aa >= (1 << 4)) {\n                aa >>= 4;\n                xn <<= 2;\n            }\n            if (aa >= (1 << 2)) {\n                xn <<= 1;\n            }\n\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\n            //\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\n            // This is going to be our x_0 (and ε_0)\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\n\n            // From here, Newton's method give us:\n            // x_{n+1} = (x_n + a / x_n) / 2\n            //\n            // One should note that:\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\n            //              = ((x_n² + a) / (2 * x_n))² - a\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\n            //              = (x_n² - a)² / (2 * x_n)²\n            //              = ((x_n² - a) / (2 * x_n))²\n            //              ≥ 0\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\n            //\n            // This gives us the proof of quadratic convergence of the sequence:\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\n            //         = | ε_n² / (2 * x_n) |\n            //         = ε_n² / | (2 * x_n) |\n            //\n            // For the first iteration, we have a special case where x_0 is known:\n            // ε_1 = ε_0² / | (2 * x_0) |\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\n            //     ≤ 2**(e-3) / 3\n            //     ≤ 2**(e-3-log2(3))\n            //     ≤ 2**(e-4.5)\n            //\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\n            //         ≤ 2**(2*e-2*k) / 2**e\n            //         ≤ 2**(e-2*k)\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\n\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\n            // sqrt(a) or sqrt(a) + 1.\n            return xn - SafeCast.toUint(xn > a / xn);\n        }\n    }\n\n    /**\n     * @dev Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 exp;\n        unchecked {\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\n            value >>= exp;\n            result += exp;\n\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\n            value >>= exp;\n            result += exp;\n\n            result += SafeCast.toUint(value > 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        uint256 isGt;\n        unchecked {\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\n            value >>= isGt * 128;\n            result += isGt * 16;\n\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\n            value >>= isGt * 64;\n            result += isGt * 8;\n\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\n            value >>= isGt * 32;\n            result += isGt * 4;\n\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\n            value >>= isGt * 16;\n            result += isGt * 2;\n\n            result += SafeCast.toUint(value > (1 << 8) - 1);\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeCast {\n    /**\n     * @dev Value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\n\n    /**\n     * @dev An int value doesn't fit in an uint of `bits` size.\n     */\n    error SafeCastOverflowedIntToUint(int256 value);\n\n    /**\n     * @dev Value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\n\n    /**\n     * @dev An uint value doesn't fit in an int of `bits` size.\n     */\n    error SafeCastOverflowedUintToInt(uint256 value);\n\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        if (value > type(uint248).max) {\n            revert SafeCastOverflowedUintDowncast(248, value);\n        }\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        if (value > type(uint240).max) {\n            revert SafeCastOverflowedUintDowncast(240, value);\n        }\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        if (value > type(uint232).max) {\n            revert SafeCastOverflowedUintDowncast(232, value);\n        }\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        if (value > type(uint224).max) {\n            revert SafeCastOverflowedUintDowncast(224, value);\n        }\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        if (value > type(uint216).max) {\n            revert SafeCastOverflowedUintDowncast(216, value);\n        }\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        if (value > type(uint208).max) {\n            revert SafeCastOverflowedUintDowncast(208, value);\n        }\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        if (value > type(uint200).max) {\n            revert SafeCastOverflowedUintDowncast(200, value);\n        }\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        if (value > type(uint192).max) {\n            revert SafeCastOverflowedUintDowncast(192, value);\n        }\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        if (value > type(uint184).max) {\n            revert SafeCastOverflowedUintDowncast(184, value);\n        }\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        if (value > type(uint176).max) {\n            revert SafeCastOverflowedUintDowncast(176, value);\n        }\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        if (value > type(uint168).max) {\n            revert SafeCastOverflowedUintDowncast(168, value);\n        }\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        if (value > type(uint160).max) {\n            revert SafeCastOverflowedUintDowncast(160, value);\n        }\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        if (value > type(uint152).max) {\n            revert SafeCastOverflowedUintDowncast(152, value);\n        }\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        if (value > type(uint144).max) {\n            revert SafeCastOverflowedUintDowncast(144, value);\n        }\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        if (value > type(uint136).max) {\n            revert SafeCastOverflowedUintDowncast(136, value);\n        }\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        if (value > type(uint128).max) {\n            revert SafeCastOverflowedUintDowncast(128, value);\n        }\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        if (value > type(uint120).max) {\n            revert SafeCastOverflowedUintDowncast(120, value);\n        }\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        if (value > type(uint112).max) {\n            revert SafeCastOverflowedUintDowncast(112, value);\n        }\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        if (value > type(uint104).max) {\n            revert SafeCastOverflowedUintDowncast(104, value);\n        }\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        if (value > type(uint96).max) {\n            revert SafeCastOverflowedUintDowncast(96, value);\n        }\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        if (value > type(uint88).max) {\n            revert SafeCastOverflowedUintDowncast(88, value);\n        }\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        if (value > type(uint80).max) {\n            revert SafeCastOverflowedUintDowncast(80, value);\n        }\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        if (value > type(uint72).max) {\n            revert SafeCastOverflowedUintDowncast(72, value);\n        }\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        if (value > type(uint64).max) {\n            revert SafeCastOverflowedUintDowncast(64, value);\n        }\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        if (value > type(uint56).max) {\n            revert SafeCastOverflowedUintDowncast(56, value);\n        }\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        if (value > type(uint48).max) {\n            revert SafeCastOverflowedUintDowncast(48, value);\n        }\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        if (value > type(uint40).max) {\n            revert SafeCastOverflowedUintDowncast(40, value);\n        }\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        if (value > type(uint32).max) {\n            revert SafeCastOverflowedUintDowncast(32, value);\n        }\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        if (value > type(uint24).max) {\n            revert SafeCastOverflowedUintDowncast(24, value);\n        }\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        if (value > type(uint16).max) {\n            revert SafeCastOverflowedUintDowncast(16, value);\n        }\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        if (value > type(uint8).max) {\n            revert SafeCastOverflowedUintDowncast(8, value);\n        }\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        if (value < 0) {\n            revert SafeCastOverflowedIntToUint(value);\n        }\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(248, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(240, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(232, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(224, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(216, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(208, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(200, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(192, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(184, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(176, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(168, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(160, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(152, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(144, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(136, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(128, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(120, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(112, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(104, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(96, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(88, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(80, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(72, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(64, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(56, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(48, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(40, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(32, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(24, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(16, value);\n        }\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        if (downcasted != value) {\n            revert SafeCastOverflowedIntDowncast(8, value);\n        }\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        if (value > uint256(type(int256).max)) {\n            revert SafeCastOverflowedUintToInt(value);\n        }\n        return int256(value);\n    }\n\n    /**\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\n     */\n    function toUint(bool b) internal pure returns (uint256 u) {\n        assembly (\"memory-safe\") {\n            u := iszero(iszero(b))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Panic.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Helper library for emitting standardized panic codes.\n *\n * ```solidity\n * contract Example {\n *      using Panic for uint256;\n *\n *      // Use any of the declared internal constants\n *      function foo() { Panic.GENERIC.panic(); }\n *\n *      // Alternatively\n *      function foo() { Panic.panic(Panic.GENERIC); }\n * }\n * ```\n *\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\n *\n * _Available since v5.1._\n */\n// slither-disable-next-line unused-state\nlibrary Panic {\n    /// @dev generic / unspecified error\n    uint256 internal constant GENERIC = 0x00;\n    /// @dev used by the assert() builtin\n    uint256 internal constant ASSERT = 0x01;\n    /// @dev arithmetic underflow or overflow\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\n    /// @dev division or modulo by zero\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\n    /// @dev enum conversion error\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\n    /// @dev invalid encoding in storage\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\n    /// @dev empty array pop\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\n    /// @dev array out of bounds access\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\n    /// @dev resource error (too large allocation or too large array)\n    uint256 internal constant RESOURCE_ERROR = 0x41;\n    /// @dev calling invalid internal function\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\n\n    /// @dev Reverts with a panic code. Recommended to use with\n    /// the internal constants with predefined codes.\n    function panic(uint256 code) internal pure {\n        assembly (\"memory-safe\") {\n            mstore(0x00, 0x4e487b71)\n            mstore(0x20, code)\n            revert(0x1c, 0x24)\n        }\n    }\n}\n"
    },
    "@polytope-labs/ismp-solidity/interfaces/IDispatcher.sol": {
      "content": "// Copyright (C) Polytope Labs Ltd.\n// SPDX-License-Identifier: Apache-2.0\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// \thttp://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\npragma solidity ^0.8.17;\n\nimport {PostRequest, StateMachineHeight} from \"./Message.sol\";\n\n// @notice An object for dispatching post requests to the Hyperbridge\nstruct DispatchPost {\n\t// bytes representation of the destination state machine\n\tbytes dest;\n\t// the destination module\n\tbytes to;\n\t// the request body\n\tbytes body;\n\t// timeout for this request in seconds\n\tuint64 timeout;\n\t// the amount put up to be paid to the relayer,\n\t// this is charged in `IIsmpHost.feeToken` to `msg.sender`\n\tuint256 fee;\n\t// who pays for this request?\n\taddress payer;\n}\n\n// @notice An object for dispatching get requests to the Hyperbridge\nstruct DispatchGet {\n\t// bytes representation of the destination state machine\n\tbytes dest;\n\t// height at which to read the state machine\n\tuint64 height;\n\t// storage keys to read\n\tbytes[] keys;\n\t// timeout for this request in seconds\n\tuint64 timeout;\n\t// Hyperbridge protocol fees for processing this request.\n\tuint256 fee;\n\t// Some application-specific metadata relating to this request\n\tbytes context;\n}\n\nstruct DispatchPostResponse {\n\t// The request that initiated this response\n\tPostRequest request;\n\t// bytes for post response\n\tbytes response;\n\t// timeout for this response in seconds\n\tuint64 timeout;\n\t// the amount put up to be paid to the relayer,\n\t// this is charged in `IIsmpHost.feeToken` to `msg.sender`\n\tuint256 fee;\n\t// who pays for this request?\n\taddress payer;\n}\n\n/*\n * @title The Ismp Dispatcher\n * @author Polytope Labs (hello@polytope.technology)\n *\n * @notice The IDispatcher serves as the interface requests & response messages.\n */\ninterface IDispatcher {\n\t/**\n\t * @dev Returns the address for the Uniswap V2 Router implementation used for swaps\n\t * @return routerAddress - The address to the in-use RouterV02 implementation\n\t */\n\tfunction uniswapV2Router() external view returns (address);\n\n\t/**\n\t * @dev Returns the nonce immediately available for requests\n\t * @return the `nonce`\n\t */\n\tfunction nonce() external view returns (uint256);\n\n\t/**\n\t * @dev Returns the address of the ERC-20 fee token contract configured for this state machine.\n\t *\n\t * @notice Hyperbridge collects it's dispatch fees in the provided token denomination. This will typically be in stablecoins.\n\t *\n\t * @return feeToken - The ERC20 contract address for fees.\n\t */\n\tfunction feeToken() external view returns (address);\n\n\t/**\n\t * @dev Returns the address of the per byte fee configured for the destination state machine.\n\t *\n\t * @notice Hyperbridge collects it's dispatch fees per every byte of the outgoing message.\n\t *\n\t * @param dest - The destination chain for the per byte fee.\n\t * @return perByteFee - The per byte fee for outgoing messages.\n\t */\n\tfunction perByteFee(bytes memory dest) external view returns (uint256);\n\n\t/**\n\t * @dev Dispatch a POST request to Hyperbridge\n\t *\n\t * @notice Payment for the request can be made with either the native token or the IIsmpHost.feeToken.\n\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\n\t * Will revert if enough native tokens are not provided.\n\t *\n\t * If no native tokens are provided then it will try to collect payment from the calling contract in\n\t * the IIsmpHost.feeToken.\n\t *\n\t * @param request - post request\n\t * @return commitment - the request commitment\n\t */\n\tfunction dispatch(DispatchPost memory request) external payable returns (bytes32 commitment);\n\n\t/**\n\t * @dev Dispatch a GET request to Hyperbridge\n\t *\n\t * @notice Payment for the request can be made with either the native token or the IIsmpHost.feeToken.\n\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\n\t * Will revert if enough native tokens are not provided.\n\t *\n\t * If no native tokens are provided then it will try to collect payment from the calling contract in\n\t * the IIsmpHost.feeToken.\n\t *\n\t * @param request - get request\n\t * @return commitment - the request commitment\n\t */\n\tfunction dispatch(DispatchGet memory request) external payable returns (bytes32 commitment);\n\n\t/**\n\t * @dev Dispatch a POST response to Hyperbridge\n\t *\n\t * @notice Payment for the request can be made with either the native token or the IIsmpHost.feeToken.\n\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\n\t * Will revert if enough native tokens are not provided.\n\t *\n\t * If no native tokens are provided then it will try to collect payment from the calling contract in\n\t * the IIsmpHost.feeToken.\n\t *\n\t * @param response - post response\n\t * @return commitment - the request commitment\n\t */\n\tfunction dispatch(DispatchPostResponse memory response) external payable returns (bytes32 commitment);\n\n\t/**\n\t * @dev Increase the relayer fee for a previously dispatched request.\n\t * This is provided for use only on pending requests, such that when they timeout,\n\t * the user can recover the entire relayer fee.\n\t *\n\t * @notice Payment can be made with either the native token or the IIsmpHost.feeToken.\n\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\n\t * Will revert if enough native tokens are not provided.\n\t *\n\t * If no native tokens are provided then it will try to collect payment from the calling contract in\n\t * the IIsmpHost.feeToken.\n\t *\n\t * If called on an already delivered request, these funds will be seen as a donation to the hyperbridge protocol.\n\t * @param commitment - The request commitment\n\t * @param amount - The amount provided in `IIsmpHost.feeToken()`\n\t */\n\tfunction fundRequest(bytes32 commitment, uint256 amount) external payable;\n\n\t/**\n\t * @dev Increase the relayer fee for a previously dispatched response.\n\t * This is provided for use only on pending responses, such that when they timeout,\n\t * the user can recover the entire relayer fee.\n\t *\n\t * @notice Payment can be made with either the native token or the IIsmpHost.feeToken.\n\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\n\t * Will revert if enough native tokens are not provided.\n\t *\n\t * If no native tokens are provided then it will try to collect payment from the calling contract in\n\t * the IIsmpHost.feeToken.\n\t *\n\t * If called on an already delivered response, these funds will be seen as a donation to the hyperbridge protocol.\n\t * @param commitment - The response commitment\n\t * @param amount - The amount to be provided in `IIsmpHost.feeToken()`\n\t */\n\tfunction fundResponse(bytes32 commitment, uint256 amount) external payable;\n}\n"
    },
    "@polytope-labs/ismp-solidity/interfaces/IIsmpModule.sol": {
      "content": "// Copyright (C) Polytope Labs Ltd.\n// SPDX-License-Identifier: Apache-2.0\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// \thttp://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\npragma solidity ^0.8.17;\n\nimport {PostRequest, PostResponse, GetResponse, GetRequest} from \"./Message.sol\";\nimport {DispatchPost, DispatchPostResponse, DispatchGet, IDispatcher} from \"./IDispatcher.sol\";\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nstruct IncomingPostRequest {\n\t// The Post request\n\tPostRequest request;\n\t// Relayer responsible for delivering the request\n\taddress relayer;\n}\n\nstruct IncomingPostResponse {\n\t// The Post response\n\tPostResponse response;\n\t// Relayer responsible for delivering the response\n\taddress relayer;\n}\n\nstruct IncomingGetResponse {\n\t// The Get response\n\tGetResponse response;\n\t// Relayer responsible for delivering the response\n\taddress relayer;\n}\n\ninterface IIsmpModule {\n\t/**\n\t * @dev Called by the `IsmpHost` to notify a module of a new request the module may choose to respond immediately, or in a later block\n\t * @param incoming post request\n\t */\n\tfunction onAccept(IncomingPostRequest memory incoming) external;\n\n\t/**\n\t * @dev Called by the `IsmpHost` to notify a module of a post response to a previously sent out request\n\t * @param incoming post response\n\t */\n\tfunction onPostResponse(IncomingPostResponse memory incoming) external;\n\n\t/**\n\t * @dev Called by the `IsmpHost` to notify a module of a get response to a previously sent out request\n\t * @param incoming get response\n\t */\n\tfunction onGetResponse(IncomingGetResponse memory incoming) external;\n\n\t/**\n\t * @dev Called by the `IsmpHost` to notify a module of post requests that were previously sent but have now timed-out\n\t * @param request post request\n\t */\n\tfunction onPostRequestTimeout(PostRequest memory request) external;\n\n\t/**\n\t * @dev Called by the `IsmpHost` to notify a module of post requests that were previously sent but have now timed-out\n\t * @param request post request\n\t */\n\tfunction onPostResponseTimeout(PostResponse memory request) external;\n\n\t/**\n\t * @dev Called by the `IsmpHost` to notify a module of get requests that were previously sent but have now timed-out\n\t * @param request get request\n\t */\n\tfunction onGetTimeout(GetRequest memory request) external;\n}\n\n// @notice Abstract contract to make implementing `IIsmpModule` easier.\nabstract contract BaseIsmpModule is IIsmpModule {\n\t// @notice Call was not expected\n\terror UnexpectedCall();\n\n\t// @notice Account is unauthorized\n\terror UnauthorizedCall();\n\n\t// @dev restricts caller to the local `IsmpHost`\n\tmodifier onlyHost() {\n\t\tif (msg.sender != host()) revert UnauthorizedCall();\n\t\t_;\n\t}\n\n\tconstructor() {\n\t\taddress hostAddr = host();\n\t\tif (hostAddr != address(0)) {\n\t\t\t// approve the host infintely\n\t\t\tIERC20(IDispatcher(hostAddr).feeToken()).approve(hostAddr, type(uint256).max);\n\t\t}\n\t}\n\n\t// @dev Returns the `IsmpHost` address for the current chain.\n\t// The `IsmpHost` is an immutable contract that will never change.\n\tfunction host() public view returns (address h) {\n\t\tassembly {\n\t\t\tswitch chainid()\n\t\t\t// Ethereum Sepolia\n\t\t\tcase 11155111 {\n\t\t\t\th := 0x2EdB74C269948b60ec1000040E104cef0eABaae8\n\t\t\t}\n\t\t\t// Arbitrum Sepolia\n\t\t\tcase 421614 {\n\t\t\t\th := 0x3435bD7e5895356535459D6087D1eB982DAd90e7\n\t\t\t}\n\t\t\t// Optimism Sepolia\n\t\t\tcase 11155420 {\n\t\t\t\th := 0x6d51b678836d8060d980605d2999eF211809f3C2\n\t\t\t}\n\t\t\t// Base Sepolia\n\t\t\tcase 84532 {\n\t\t\t\th := 0xD198c01839dd4843918617AfD1e4DDf44Cc3BB4a\n\t\t\t}\n\t\t\t// Binance Smart Chain Testnet\n\t\t\tcase 97 {\n\t\t\t\th := 0x8Aa0Dea6D675d785A882967Bf38183f6117C09b7\n\t\t\t}\n\t\t\t// Gnosis Chiado Testnet\n\t\t\tcase 10200 {\n\t\t\t\th := 0x58A41B89F4871725E5D898d98eF4BF917601c5eB\n\t\t\t}\n\t\t}\n\t}\n\n\t// @dev returns the quoted fee for a dispatch\n\tfunction quote(DispatchPost memory post) public view returns (uint256) {\n\t\treturn post.fee + (post.body.length * IDispatcher(host()).perByteFee(post.dest));\n\t}\n\n\t// @dev returns the quoted fee for a dispatch\n\tfunction quote(DispatchPostResponse memory res) public view returns (uint256) {\n\t\treturn res.fee + (res.response.length * IDispatcher(host()).perByteFee(res.request.source));\n\t}\n\n\tfunction onAccept(IncomingPostRequest calldata) external virtual onlyHost {\n\t\trevert UnexpectedCall();\n\t}\n\n\tfunction onPostRequestTimeout(PostRequest memory) external virtual onlyHost {\n\t\trevert UnexpectedCall();\n\t}\n\n\tfunction onPostResponse(IncomingPostResponse memory) external virtual onlyHost {\n\t\trevert UnexpectedCall();\n\t}\n\n\tfunction onPostResponseTimeout(PostResponse memory) external virtual onlyHost {\n\t\trevert UnexpectedCall();\n\t}\n\n\tfunction onGetResponse(IncomingGetResponse memory) external virtual onlyHost {\n\t\trevert UnexpectedCall();\n\t}\n\n\tfunction onGetTimeout(GetRequest memory) external virtual onlyHost {\n\t\trevert UnexpectedCall();\n\t}\n}\n"
    },
    "@polytope-labs/ismp-solidity/interfaces/Message.sol": {
      "content": "// Copyright (C) Polytope Labs Ltd.\n// SPDX-License-Identifier: Apache-2.0\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// \thttp://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\npragma solidity ^0.8.17;\n\nimport {StorageValue} from \"@polytope-labs/solidity-merkle-trees/src/Types.sol\";\n\n// Identifies some state machine height. We allow for a state machine identifier here\n// as some consensus clients may track multiple, concurrent state machines.\nstruct StateMachineHeight {\n\t// the state machine identifier\n\tuint256 stateMachineId;\n\t// height of this state machine\n\tuint256 height;\n}\n\nstruct PostRequest {\n\t// the source state machine of this request\n\tbytes source;\n\t// the destination state machine of this request\n\tbytes dest;\n\t// request nonce\n\tuint64 nonce;\n\t// Module Id of this request origin\n\tbytes from;\n\t// destination module id\n\tbytes to;\n\t// timestamp by which this request times out.\n\tuint64 timeoutTimestamp;\n\t// request body\n\tbytes body;\n}\n\nstruct GetRequest {\n\t// the source state machine of this request\n\tbytes source;\n\t// the destination state machine of this request\n\tbytes dest;\n\t// request nonce\n\tuint64 nonce;\n\t// Module Id of this request origin\n\taddress from;\n\t// timestamp by which this request times out.\n\tuint64 timeoutTimestamp;\n\t// Storage keys to read.\n\tbytes[] keys;\n\t// height at which to read destination state machine\n\tuint64 height;\n\t// Some application-specific metadata relating to this request\n\tbytes context;\n}\n\nstruct GetResponse {\n\t// The request that initiated this response\n\tGetRequest request;\n\t// storage values for get response\n\tStorageValue[] values;\n}\n\nstruct PostResponse {\n\t// The request that initiated this response\n\tPostRequest request;\n\t// bytes for post response\n\tbytes response;\n\t// timestamp by which this response times out.\n\tuint64 timeoutTimestamp;\n}\n\n// A post request as a leaf in a merkle tree\nstruct PostRequestLeaf {\n\t// The request\n\tPostRequest request;\n\t// It's index in the mmr leaves\n\tuint256 index;\n\t// it's k-index\n\tuint256 kIndex;\n}\n\n// A post response as a leaf in a merkle tree\nstruct PostResponseLeaf {\n\t// The response\n\tPostResponse response;\n\t// It's index in the mmr leaves\n\tuint256 index;\n\t// it's k-index\n\tuint256 kIndex;\n}\n\n// A get response as a leaf in a merkle mountain range tree\nstruct GetResponseLeaf {\n\t// The response\n\tGetResponse response;\n\t// It's index in the mmr leaves\n\tuint256 index;\n\t// it's k-index\n\tuint256 kIndex;\n}\n\n// A merkle mountain range proof.\nstruct Proof {\n\t// height of the state machine\n\tStateMachineHeight height;\n\t// the multi-proof\n\tbytes32[] multiproof;\n\t// The total number of leaves in the mmr for this proof.\n\tuint256 leafCount;\n}\n\n// A message for handling incoming requests\nstruct PostRequestMessage {\n\t// proof for the requests\n\tProof proof;\n\t// The requests, contained in the merkle mountain range tree\n\tPostRequestLeaf[] requests;\n}\n\n// A message for handling incoming GET responses\nstruct GetResponseMessage {\n\t// proof for the responses\n\tProof proof;\n\t// The responses, contained in the merkle mountain range tree\n\tGetResponseLeaf[] responses;\n}\n\nstruct GetTimeoutMessage {\n\t// requests which have timed-out\n\tGetRequest[] timeouts;\n\t// the height of the state machine proof\n\tStateMachineHeight height;\n\t// non-membership proof of the requests\n\tbytes[] proof;\n}\n\nstruct PostRequestTimeoutMessage {\n\t// requests which have timed-out\n\tPostRequest[] timeouts;\n\t// the height of the state machine proof\n\tStateMachineHeight height;\n\t// non-membership proof of the requests\n\tbytes[] proof;\n}\n\nstruct PostResponseTimeoutMessage {\n\t// responses which have timed-out\n\tPostResponse[] timeouts;\n\t// the height of the state machine proof\n\tStateMachineHeight height;\n\t// non-membership proof of the requests\n\tbytes[] proof;\n}\n\n// A message for handling incoming responses\nstruct PostResponseMessage {\n\t// proof for the responses\n\tProof proof;\n\t// the responses, contained in a merkle tree leaf\n\tPostResponseLeaf[] responses;\n}\n\nlibrary Message {\n\t/**\n\t * @dev Calculates the absolute timeout value for a PostRequest\n\t */\n\tfunction timeout(PostRequest memory req) internal pure returns (uint64) {\n\t\tif (req.timeoutTimestamp == 0) {\n\t\t\treturn type(uint64).max;\n\t\t} else {\n\t\t\treturn req.timeoutTimestamp;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculates the absolute timeout value for a GetRequest\n\t */\n\tfunction timeout(GetRequest memory req) internal pure returns (uint64) {\n\t\tif (req.timeoutTimestamp == 0) {\n\t\t\treturn type(uint64).max;\n\t\t} else {\n\t\t\treturn req.timeoutTimestamp;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Calculates the absolute timeout value for a PostResponse\n\t */\n\tfunction timeout(PostResponse memory res) internal pure returns (uint64) {\n\t\tif (res.timeoutTimestamp == 0) {\n\t\t\treturn type(uint64).max;\n\t\t} else {\n\t\t\treturn res.timeoutTimestamp;\n\t\t}\n\t}\n\n\t/**\n\t * @dev Encode the given post request for commitment\n\t */\n\tfunction encode(PostRequest memory req) internal pure returns (bytes memory) {\n\t\treturn abi.encodePacked(req.source, req.dest, req.nonce, req.timeoutTimestamp, req.from, req.to, req.body);\n\t}\n\n\t/**\n\t * @dev Encode the given get request for commitment\n\t */\n\tfunction encode(GetRequest memory req) internal pure returns (bytes memory) {\n\t\tbytes memory keysEncoding = bytes(\"\");\n\t\tuint256 len = req.keys.length;\n\t\tfor (uint256 i = 0; i < len; i++) {\n\t\t\tkeysEncoding = bytes.concat(keysEncoding, req.keys[i]);\n\t\t}\n\n\t\treturn\n\t\t\tabi.encodePacked(\n\t\t\t\treq.source,\n\t\t\t\treq.dest,\n\t\t\t\treq.nonce,\n\t\t\t\treq.height,\n\t\t\t\treq.timeoutTimestamp,\n\t\t\t\tabi.encodePacked(req.from),\n\t\t\t\tkeysEncoding,\n\t\t\t\treq.context\n\t\t\t);\n\t}\n\n\t/**\n\t * @dev Returns the commitment for the given post response\n\t */\n\tfunction hash(PostResponse memory res) internal pure returns (bytes32) {\n\t\treturn keccak256(bytes.concat(encode(res.request), abi.encodePacked(res.response, res.timeoutTimestamp)));\n\t}\n\n\t/**\n\t * @dev Returns the commitment for the given post request\n\t */\n\tfunction hash(PostRequest memory req) internal pure returns (bytes32) {\n\t\treturn keccak256(encode(req));\n\t}\n\n\t/**\n\t * @dev Returns the commitment for the given get request\n\t */\n\tfunction hash(GetRequest memory req) internal pure returns (bytes32) {\n\t\treturn keccak256(encode(req));\n\t}\n\n\t/**\n\t * @dev Returns the commitment for the given get response\n\t */\n\tfunction hash(GetResponse memory res) internal pure returns (bytes32) {\n\t\tbytes memory response = bytes(\"\");\n\t\tuint256 len = res.values.length;\n\t\tfor (uint256 i = 0; i < len; i++) {\n\t\t\tresponse = bytes.concat(response, bytes.concat(res.values[i].key, res.values[i].value));\n\t\t}\n\t\treturn keccak256(bytes.concat(encode(res.request), response));\n\t}\n}\n"
    },
    "@polytope-labs/solidity-merkle-trees/src/trie/Bytes.sol": {
      "content": "pragma solidity ^0.8.17;\n\n// SPDX-License-Identifier: Apache2\n\nimport {Memory} from \"./Memory.sol\";\n\nstruct ByteSlice {\n    bytes data;\n    uint256 offset;\n}\n\nlibrary Bytes {\n    uint256 internal constant BYTES_HEADER_SIZE = 32;\n\n    // Checks if two `bytes memory` variables are equal. This is done using hashing,\n    // which is much more gas efficient then comparing each byte individually.\n    // Equality means that:\n    //  - 'self.length == other.length'\n    //  - For 'n' in '[0, self.length)', 'self[n] == other[n]'\n    function equals(\n        bytes memory self,\n        bytes memory other\n    ) internal pure returns (bool equal) {\n        if (self.length != other.length) {\n            return false;\n        }\n        uint256 addr;\n        uint256 addr2;\n        assembly {\n            addr := add(self, /*BYTES_HEADER_SIZE*/ 32)\n            addr2 := add(other, /*BYTES_HEADER_SIZE*/ 32)\n        }\n        equal = Memory.equals(addr, addr2, self.length);\n    }\n\n    function readByte(ByteSlice memory self) internal pure returns (uint8) {\n        if (self.offset + 1 > self.data.length) {\n            revert(\"Out of range\");\n        }\n\n        uint8 b = uint8(self.data[self.offset]);\n        self.offset += 1;\n\n        return b;\n    }\n\n    // Copies 'len' bytes from 'self' into a new array, starting at the provided 'startIndex'.\n    // Returns the new copy.\n    // Requires that:\n    //  - 'startIndex + len <= self.length'\n    // The length of the substring is: 'len'\n    function read(\n        ByteSlice memory self,\n        uint256 len\n    ) internal pure returns (bytes memory) {\n        require(self.offset + len <= self.data.length);\n        if (len == 0) {\n            return \"\";\n        }\n        uint256 addr = Memory.dataPtr(self.data);\n        bytes memory slice = Memory.toBytes(addr + self.offset, len);\n        self.offset += len;\n        return slice;\n    }\n\n    // Copies a section of 'self' into a new array, starting at the provided 'startIndex'.\n    // Returns the new copy.\n    // Requires that 'startIndex <= self.length'\n    // The length of the substring is: 'self.length - startIndex'\n    function substr(\n        bytes memory self,\n        uint256 startIndex\n    ) internal pure returns (bytes memory) {\n        require(startIndex <= self.length);\n        uint256 len = self.length - startIndex;\n        uint256 addr = Memory.dataPtr(self);\n        return Memory.toBytes(addr + startIndex, len);\n    }\n\n    // Copies 'len' bytes from 'self' into a new array, starting at the provided 'startIndex'.\n    // Returns the new copy.\n    // Requires that:\n    //  - 'startIndex + len <= self.length'\n    // The length of the substring is: 'len'\n    function substr(\n        bytes memory self,\n        uint256 startIndex,\n        uint256 len\n    ) internal pure returns (bytes memory) {\n        require(startIndex + len <= self.length);\n        if (len == 0) {\n            return \"\";\n        }\n        uint256 addr = Memory.dataPtr(self);\n        return Memory.toBytes(addr + startIndex, len);\n    }\n\n    // Combines 'self' and 'other' into a single array.\n    // Returns the concatenated arrays:\n    //  [self[0], self[1], ... , self[self.length - 1], other[0], other[1], ... , other[other.length - 1]]\n    // The length of the new array is 'self.length + other.length'\n    function concat(\n        bytes memory self,\n        bytes memory other\n    ) internal pure returns (bytes memory) {\n        bytes memory ret = new bytes(self.length + other.length);\n        uint256 src;\n        uint256 srcLen;\n        (src, srcLen) = Memory.fromBytes(self);\n        uint256 src2;\n        uint256 src2Len;\n        (src2, src2Len) = Memory.fromBytes(other);\n        uint256 dest;\n        (dest, ) = Memory.fromBytes(ret);\n        uint256 dest2 = dest + srcLen;\n        Memory.copy(src, dest, srcLen);\n        Memory.copy(src2, dest2, src2Len);\n        return ret;\n    }\n\n    function toBytes32(bytes memory self) internal pure returns (bytes32 out) {\n        require(self.length >= 32, \"Bytes:: toBytes32: data is to short.\");\n        assembly {\n            out := mload(add(self, 32))\n        }\n    }\n\n    function toBytes16(\n        bytes memory self,\n        uint256 offset\n    ) internal pure returns (bytes16 out) {\n        for (uint256 i = 0; i < 16; i++) {\n            out |= bytes16(bytes1(self[offset + i]) & 0xFF) >> (i * 8);\n        }\n    }\n\n    function toBytes8(\n        bytes memory self,\n        uint256 offset\n    ) internal pure returns (bytes8 out) {\n        for (uint256 i = 0; i < 8; i++) {\n            out |= bytes8(bytes1(self[offset + i]) & 0xFF) >> (i * 8);\n        }\n    }\n\n    function toBytes4(\n        bytes memory self,\n        uint256 offset\n    ) internal pure returns (bytes4) {\n        bytes4 out;\n\n        for (uint256 i = 0; i < 4; i++) {\n            out |= bytes4(self[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function toBytes2(\n        bytes memory self,\n        uint256 offset\n    ) internal pure returns (bytes2) {\n        bytes2 out;\n\n        for (uint256 i = 0; i < 2; i++) {\n            out |= bytes2(self[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function removeLeadingZero(\n        bytes memory data\n    ) internal pure returns (bytes memory) {\n        uint256 length = data.length;\n\n        uint256 startIndex = 0;\n        for (uint256 i = 0; i < length; i++) {\n            if (data[i] != 0) {\n                startIndex = i;\n                break;\n            }\n        }\n\n        return substr(data, startIndex);\n    }\n\n    function removeEndingZero(\n        bytes memory data\n    ) internal pure returns (bytes memory) {\n        uint256 length = data.length;\n\n        uint256 endIndex = 0;\n        for (uint256 i = length - 1; i >= 0; i--) {\n            if (data[i] != 0) {\n                endIndex = i;\n                break;\n            }\n        }\n\n        return substr(data, 0, endIndex + 1);\n    }\n\n    function reverse(\n        bytes memory inbytes\n    ) internal pure returns (bytes memory) {\n        uint256 inlength = inbytes.length;\n        bytes memory outbytes = new bytes(inlength);\n\n        for (uint256 i = 0; i <= inlength - 1; i++) {\n            outbytes[i] = inbytes[inlength - i - 1];\n        }\n\n        return outbytes;\n    }\n}\n"
    },
    "@polytope-labs/solidity-merkle-trees/src/trie/Memory.sol": {
      "content": "pragma solidity ^0.8.17;\n\n// SPDX-License-Identifier: Apache2\n\nlibrary Memory {\n    uint256 internal constant WORD_SIZE = 32;\n\n    // Compares the 'len' bytes starting at address 'addr' in memory with the 'len'\n    // bytes starting at 'addr2'.\n    // Returns 'true' if the bytes are the same, otherwise 'false'.\n    function equals(\n        uint256 addr,\n        uint256 addr2,\n        uint256 len\n    ) internal pure returns (bool equal) {\n        assembly {\n            equal := eq(keccak256(addr, len), keccak256(addr2, len))\n        }\n    }\n\n    // Compares the 'len' bytes starting at address 'addr' in memory with the bytes stored in\n    // 'bts'. It is allowed to set 'len' to a lower value then 'bts.length', in which case only\n    // the first 'len' bytes will be compared.\n    // Requires that 'bts.length >= len'\n\n    function equals(\n        uint256 addr,\n        uint256 len,\n        bytes memory bts\n    ) internal pure returns (bool equal) {\n        require(bts.length >= len);\n        uint256 addr2;\n        assembly {\n            addr2 := add(bts, /*BYTES_HEADER_SIZE*/ 32)\n        }\n        return equals(addr, addr2, len);\n    }\n    // Returns a memory pointer to the data portion of the provided bytes array.\n\n    function dataPtr(bytes memory bts) internal pure returns (uint256 addr) {\n        assembly {\n            addr := add(bts, /*BYTES_HEADER_SIZE*/ 32)\n        }\n    }\n\n    // Creates a 'bytes memory' variable from the memory address 'addr', with the\n    // length 'len'. The function will allocate new memory for the bytes array, and\n    // the 'len bytes starting at 'addr' will be copied into that new memory.\n    function toBytes(\n        uint256 addr,\n        uint256 len\n    ) internal pure returns (bytes memory bts) {\n        bts = new bytes(len);\n        uint256 btsptr;\n        assembly {\n            btsptr := add(bts, /*BYTES_HEADER_SIZE*/ 32)\n        }\n        copy(addr, btsptr, len);\n    }\n\n    // Copies 'self' into a new 'bytes memory'.\n    // Returns the newly created 'bytes memory'\n    // The returned bytes will be of length '32'.\n    function toBytes(bytes32 self) internal pure returns (bytes memory bts) {\n        bts = new bytes(32);\n        assembly {\n            mstore(add(bts, /*BYTES_HEADER_SIZE*/ 32), self)\n        }\n    }\n\n    // Copy 'len' bytes from memory address 'src', to address 'dest'.\n    // This function does not check the or destination, it only copies\n    // the bytes.\n    function copy(uint256 src, uint256 dest, uint256 len) internal pure {\n        // Copy word-length chunks while possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n            dest += WORD_SIZE;\n            src += WORD_SIZE;\n        }\n\n        // Copy remaining bytes\n        uint256 mask = len == 0\n            ? 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n            : 256 ** (WORD_SIZE - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    // This function does the same as 'dataPtr(bytes memory)', but will also return the\n    // length of the provided bytes array.\n    function fromBytes(\n        bytes memory bts\n    ) internal pure returns (uint256 addr, uint256 len) {\n        len = bts.length;\n        assembly {\n            addr := add(bts, /*BYTES_HEADER_SIZE*/ 32)\n        }\n    }\n}\n"
    },
    "@polytope-labs/solidity-merkle-trees/src/Types.sol": {
      "content": "pragma solidity ^0.8.17;\n\n// SPDX-License-Identifier: Apache2\n\n// Outcome of a successfully verified merkle-patricia proof\nstruct StorageValue {\n    // the storage key\n    bytes key;\n    // the encoded value\n    bytes value;\n}\n\n/// @title A representation of a Merkle tree node\nstruct Node {\n    // Distance of the node to the leftmost node\n    uint256 k_index;\n    // A hash of the node itself\n    bytes32 node;\n}\n\n/// @title A representation of a MerkleMountainRange leaf\nstruct MmrLeaf {\n    // the leftmost index of a node\n    uint256 k_index;\n    // The position in the tree\n    uint256 leaf_index;\n    // The hash of the position in the tree\n    bytes32 hash;\n}\n\nstruct Iterator {\n    uint256 offset;\n    bytes32[] data;\n}\n"
    },
    "contracts/OracleV2.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.24;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {\n    IIsmpModule,\n    IncomingPostRequest,\n    IncomingPostResponse,\n    IncomingGetResponse,\n    PostRequest,\n    PostResponse,\n    GetRequest\n} from \"@polytope-labs/ismp-solidity/interfaces/IIsmpModule.sol\";\nimport {Bytes} from \"@polytope-labs/solidity-merkle-trees/src/trie/Bytes.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\ncontract OracleV2 is IIsmpModule, Ownable {\n    using Math for uint256;\n    using Bytes for bytes;\n\n    /// @notice Fee denominator\n    uint16 private constant FEE_DENOMINATOR = 10000;\n\n    /// @notice Bifrost send message module name\n    bytes private constant BIFROST_SEND_MESSAGE_MODULE_NAME = bytes(\"bif-slpx\");\n\n    struct PoolInfo {\n        uint256 tokenAmount;\n        uint256 vTokenAmount;\n    }\n\n    struct FeeRateInfo {\n        uint16 mintFeeRate;\n        uint16 redeemFeeRate;\n    }\n\n    FeeRateInfo public feeRateInfo;\n\n    mapping(address => PoolInfo) public poolInfo;\n\n    address private _host;\n\n    bytes private _bifrostChainId;\n\n    // =================== Events ===================\n    /// @notice Emitted when fee rates are changed\n    event FeeRateChanged(uint16 newMintFeeRate, uint16 newRedeemFeeRate);\n\n    /// @notice Emitted when token amount is set\n    event SetTokenAmount(address, uint256, uint256);\n\n    /// @notice Test\n    event Test1(bytes source);\n    event Test2(bytes dest);\n    event Test3(uint64 nonce);\n    event Test4(bytes from);\n    event Test5(bytes to);\n    event Test6(uint64 timeoutTimestamp);\n\n\n    /// @notice Throws if the caller is not the ISMP host.\n    error NotIsmpHost();\n    /// @notice Throws if the pool is not ready\n    error PoolNotReady();\n    /// @notice Throws if the function is not implemented\n    error NotImplemented();\n    /// @notice Throws if the fee rate is invalid\n    error InvalidFeeRate();\n    /// @notice Throws if the caller is not Bifrost\n    error NotBifrost();\n\n    modifier onlyIsmpHost() {\n        if (_msgSender() != _host) {\n            revert NotIsmpHost();\n        }\n        _;\n    }\n\n    modifier onlyFromBifrost(PostRequest calldata request) {\n        if (!request.from.equals(_bifrostChainId) || !request.source.equals(BIFROST_SEND_MESSAGE_MODULE_NAME)) {\n            revert NotBifrost();\n        }\n        _;\n    }\n\n    constructor(address hostAddress, bytes memory bifrostChainId) Ownable(msg.sender) {\n        _host = hostAddress;\n        _bifrostChainId = bifrostChainId;\n    }\n\n    /// Bifrost will set a fee and the data will be consistent with Bifrost Chain.\n    function setFeeRate(uint16 _mintFeeRate, uint16 _redeemFeeRate) external onlyOwner {\n        if (_mintFeeRate > FEE_DENOMINATOR || _redeemFeeRate > FEE_DENOMINATOR) {\n            revert InvalidFeeRate();\n        }\n        feeRateInfo.mintFeeRate = _mintFeeRate;\n        feeRateInfo.redeemFeeRate = _redeemFeeRate;\n        emit FeeRateChanged(_mintFeeRate, _redeemFeeRate);\n    }\n\n    /// Get vToken by token.\n    function getVTokenAmountByToken(address _token, uint256 _tokenAmount, Math.Rounding rounding)\n        public\n        view\n        returns (uint256)\n    {\n        PoolInfo memory pool = poolInfo[_token];\n        if (pool.vTokenAmount == 0 || pool.tokenAmount == 0) {\n            revert PoolNotReady();\n        }\n        uint256 mintFee = _tokenAmount.mulDiv(feeRateInfo.mintFeeRate, FEE_DENOMINATOR, rounding);\n        uint256 tokenAmountExcludingFee = _tokenAmount - mintFee;\n        uint256 vTokenAmount = tokenAmountExcludingFee.mulDiv(pool.vTokenAmount, pool.tokenAmount, rounding);\n        return vTokenAmount;\n    }\n\n    /// Get token by vToken.\n    function getTokenAmountByVToken(address _token, uint256 _vTokenAmount, Math.Rounding rounding)\n        public\n        view\n        returns (uint256)\n    {\n        PoolInfo memory pool = poolInfo[_token];\n        if (pool.vTokenAmount == 0 || pool.tokenAmount == 0) {\n            revert PoolNotReady();\n        }\n        uint256 redeemFee = _vTokenAmount.mulDiv(feeRateInfo.redeemFeeRate, FEE_DENOMINATOR, rounding);\n        uint256 vTokenAmountExcludingFee = _vTokenAmount - redeemFee;\n        uint256 tokenAmount = vTokenAmountExcludingFee.mulDiv(pool.tokenAmount, pool.vTokenAmount, rounding);\n        return tokenAmount;\n    }\n\n    function onAccept(IncomingPostRequest calldata incoming) external override onlyIsmpHost onlyFromBifrost(incoming.request) {\n        bytes memory source = incoming.request.source;\n        bytes memory dest = incoming.request.dest;\n        uint64 nonce = incoming.request.nonce;\n        bytes memory from = incoming.request.from;\n        bytes memory to = incoming.request.to;\n        uint64 timeoutTimestamp = incoming.request.timeoutTimestamp;\n        \n        emit Test1(source);\n        emit Test2(dest);\n        emit Test3(nonce);\n        emit Test4(from);\n        emit Test5(to);\n        emit Test6(timeoutTimestamp);\n        // bytes memory body = incoming.request.body;\n        // (address token, uint256 tokenAmount, uint256 vtokenAmount) = abi.decode(body, (address, uint256, uint256));\n        // poolInfo[token].tokenAmount = tokenAmount;\n        // poolInfo[token].vTokenAmount = vtokenAmount;\n        // emit SetTokenAmount(token, tokenAmount, vtokenAmount);\n    }\n\n    function onPostResponse(IncomingPostResponse memory) external view override onlyIsmpHost {\n        revert NotImplemented();\n    }\n\n    function onGetResponse(IncomingGetResponse memory) external view override onlyIsmpHost {\n        revert NotImplemented();\n    }\n\n    function onPostRequestTimeout(PostRequest memory) external view override onlyIsmpHost {\n        revert NotImplemented();\n    }\n\n    function onPostResponseTimeout(PostResponse memory) external view override onlyIsmpHost {\n        revert NotImplemented();\n    }\n\n    function onGetTimeout(GetRequest memory) external view override onlyIsmpHost {\n        revert NotImplemented();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}