{
  "address": "0x42590f2Da1cA8d3bF43b5C330efeF578d4A51963",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vtokenAmount",
          "type": "uint256"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "source",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "dest",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "from",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "to",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "timeoutTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "body",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PostRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "response",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "timeoutTimestamp",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct PostResponse",
          "name": "response",
          "type": "tuple"
        }
      ],
      "name": "PostReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "source",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "dest",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "from",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "to",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "timeoutTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "body",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct PostRequest",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "onAcceptTest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "body",
          "type": "string"
        }
      ],
      "name": "onAcceptTest1",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "source",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "dest",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "from",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "to",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "timeoutTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "body",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PostRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            }
          ],
          "internalType": "struct IncomingPostRequest",
          "name": "incoming",
          "type": "tuple"
        }
      ],
      "name": "onAccept",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "source",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "dest",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint64",
                      "name": "nonce",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address",
                      "name": "from",
                      "type": "address"
                    },
                    {
                      "internalType": "uint64",
                      "name": "timeoutTimestamp",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes[]",
                      "name": "keys",
                      "type": "bytes[]"
                    },
                    {
                      "internalType": "uint64",
                      "name": "height",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes",
                      "name": "context",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct GetRequest",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "key",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "value",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct StorageValue[]",
                  "name": "values",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct GetResponse",
              "name": "response",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            }
          ],
          "internalType": "struct IncomingGetResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "onGetResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "source",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "dest",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timeoutTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bytes[]",
              "name": "keys",
              "type": "bytes[]"
            },
            {
              "internalType": "uint64",
              "name": "height",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "context",
              "type": "bytes"
            }
          ],
          "internalType": "struct GetRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "onGetTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "source",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "dest",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "from",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "to",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "timeoutTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "body",
              "type": "bytes"
            }
          ],
          "internalType": "struct PostRequest",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "onPostRequestTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "bytes",
                      "name": "source",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "dest",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint64",
                      "name": "nonce",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes",
                      "name": "from",
                      "type": "bytes"
                    },
                    {
                      "internalType": "bytes",
                      "name": "to",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint64",
                      "name": "timeoutTimestamp",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes",
                      "name": "body",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct PostRequest",
                  "name": "request",
                  "type": "tuple"
                },
                {
                  "internalType": "bytes",
                  "name": "response",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "timeoutTimestamp",
                  "type": "uint64"
                }
              ],
              "internalType": "struct PostResponse",
              "name": "response",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            }
          ],
          "internalType": "struct IncomingPostResponse",
          "name": "incoming",
          "type": "tuple"
        }
      ],
      "name": "onPostResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "source",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "dest",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "from",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "to",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "timeoutTimestamp",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes",
                  "name": "body",
                  "type": "bytes"
                }
              ],
              "internalType": "struct PostRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "internalType": "bytes",
              "name": "response",
              "type": "bytes"
            },
            {
              "internalType": "uint64",
              "name": "timeoutTimestamp",
              "type": "uint64"
            }
          ],
          "internalType": "struct PostResponse",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "onPostResponseTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5378b683a37c9218d4998efce4ac6053db1b3a559e8a259be2d4bbff8a556be7",
  "receipt": {
    "to": null,
    "from": "0x4597C97a43dFBb4a398E2b16AA9cE61f90d801DD",
    "contractAddress": "0x42590f2Da1cA8d3bF43b5C330efeF578d4A51963",
    "transactionIndex": 13,
    "gasUsed": "691717",
    "logsBloom": "0x
    "blockHash": "0x0b808ac06dd2f505a27eb4e890b281e33ce0720326692c0de251264c9a6f27dc",
    "transactionHash": "0x5378b683a37c9218d4998efce4ac6053db1b3a559e8a259be2d4bbff8a556be7",
    "logs": [],
    "blockNumber": 23827475,
    "cumulativeGasUsed": "4097649",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "cf356579dd92f32722490a8522df8415",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vtokenAmount\",\"type\":\"uint256\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"}],\"internalType\":\"struct PostRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct PostResponse\",\"name\":\"response\",\"type\":\"tuple\"}],\"name\":\"PostReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct PostRequest\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"onAcceptTest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"body\",\"type\":\"string\"}],\"name\":\"onAcceptTest1\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"}],\"internalType\":\"struct PostRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"internalType\":\"struct IncomingPostRequest\",\"name\":\"incoming\",\"type\":\"tuple\"}],\"name\":\"onAccept\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"internalType\":\"struct GetRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct StorageValue[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"internalType\":\"struct GetResponse\",\"name\":\"response\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"internalType\":\"struct IncomingGetResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"onGetResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes[]\",\"name\":\"keys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"height\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"}],\"internalType\":\"struct GetRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"onGetTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"}],\"internalType\":\"struct PostRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"onPostRequestTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"}],\"internalType\":\"struct PostRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct PostResponse\",\"name\":\"response\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"internalType\":\"struct IncomingPostResponse\",\"name\":\"incoming\",\"type\":\"tuple\"}],\"name\":\"onPostResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"source\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"dest\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"from\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"to\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"}],\"internalType\":\"struct PostRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"timeoutTimestamp\",\"type\":\"uint64\"}],\"internalType\":\"struct PostResponse\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"onPostResponseTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onAccept(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address))\":{\"details\":\"Called by the `IsmpHost` to notify a module of a new request the module may choose to respond immediately, or in a later block\",\"params\":{\"incoming\":\"post request\"}},\"onPostResponse((((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address))\":{\"details\":\"Called by the `IsmpHost` to notify a module of a post response to a previously sent out request\",\"params\":{\"incoming\":\"post response\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle.sol\":\"Oracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@polytope-labs/ismp-solidity/interfaces/IDispatcher.sol\":{\"content\":\"// Copyright (C) Polytope Labs Ltd.\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n// \\thttp://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\npragma solidity ^0.8.17;\\n\\nimport {PostRequest, StateMachineHeight} from \\\"./Message.sol\\\";\\n\\n// @notice An object for dispatching post requests to the Hyperbridge\\nstruct DispatchPost {\\n\\t// bytes representation of the destination state machine\\n\\tbytes dest;\\n\\t// the destination module\\n\\tbytes to;\\n\\t// the request body\\n\\tbytes body;\\n\\t// timeout for this request in seconds\\n\\tuint64 timeout;\\n\\t// the amount put up to be paid to the relayer,\\n\\t// this is charged in `IIsmpHost.feeToken` to `msg.sender`\\n\\tuint256 fee;\\n\\t// who pays for this request?\\n\\taddress payer;\\n}\\n\\n// @notice An object for dispatching get requests to the Hyperbridge\\nstruct DispatchGet {\\n\\t// bytes representation of the destination state machine\\n\\tbytes dest;\\n\\t// height at which to read the state machine\\n\\tuint64 height;\\n\\t// storage keys to read\\n\\tbytes[] keys;\\n\\t// timeout for this request in seconds\\n\\tuint64 timeout;\\n\\t// Hyperbridge protocol fees for processing this request.\\n\\tuint256 fee;\\n\\t// Some application-specific metadata relating to this request\\n\\tbytes context;\\n}\\n\\nstruct DispatchPostResponse {\\n\\t// The request that initiated this response\\n\\tPostRequest request;\\n\\t// bytes for post response\\n\\tbytes response;\\n\\t// timeout for this response in seconds\\n\\tuint64 timeout;\\n\\t// the amount put up to be paid to the relayer,\\n\\t// this is charged in `IIsmpHost.feeToken` to `msg.sender`\\n\\tuint256 fee;\\n\\t// who pays for this request?\\n\\taddress payer;\\n}\\n\\n/*\\n * @title The Ismp Dispatcher\\n * @author Polytope Labs (hello@polytope.technology)\\n *\\n * @notice The IDispatcher serves as the interface requests & response messages.\\n */\\ninterface IDispatcher {\\n\\t/**\\n\\t * @dev Returns the address for the Uniswap V2 Router implementation used for swaps\\n\\t * @return routerAddress - The address to the in-use RouterV02 implementation\\n\\t */\\n\\tfunction uniswapV2Router() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Returns the nonce immediately available for requests\\n\\t * @return the `nonce`\\n\\t */\\n\\tfunction nonce() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the address of the ERC-20 fee token contract configured for this state machine.\\n\\t *\\n\\t * @notice Hyperbridge collects it's dispatch fees in the provided token denomination. This will typically be in stablecoins.\\n\\t *\\n\\t * @return feeToken - The ERC20 contract address for fees.\\n\\t */\\n\\tfunction feeToken() external view returns (address);\\n\\n\\t/**\\n\\t * @dev Returns the address of the per byte fee configured for the destination state machine.\\n\\t *\\n\\t * @notice Hyperbridge collects it's dispatch fees per every byte of the outgoing message.\\n\\t *\\n\\t * @param dest - The destination chain for the per byte fee.\\n\\t * @return perByteFee - The per byte fee for outgoing messages.\\n\\t */\\n\\tfunction perByteFee(bytes memory dest) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Dispatch a POST request to Hyperbridge\\n\\t *\\n\\t * @notice Payment for the request can be made with either the native token or the IIsmpHost.feeToken.\\n\\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\\n\\t * Will revert if enough native tokens are not provided.\\n\\t *\\n\\t * If no native tokens are provided then it will try to collect payment from the calling contract in\\n\\t * the IIsmpHost.feeToken.\\n\\t *\\n\\t * @param request - post request\\n\\t * @return commitment - the request commitment\\n\\t */\\n\\tfunction dispatch(DispatchPost memory request) external payable returns (bytes32 commitment);\\n\\n\\t/**\\n\\t * @dev Dispatch a GET request to Hyperbridge\\n\\t *\\n\\t * @notice Payment for the request can be made with either the native token or the IIsmpHost.feeToken.\\n\\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\\n\\t * Will revert if enough native tokens are not provided.\\n\\t *\\n\\t * If no native tokens are provided then it will try to collect payment from the calling contract in\\n\\t * the IIsmpHost.feeToken.\\n\\t *\\n\\t * @param request - get request\\n\\t * @return commitment - the request commitment\\n\\t */\\n\\tfunction dispatch(DispatchGet memory request) external payable returns (bytes32 commitment);\\n\\n\\t/**\\n\\t * @dev Dispatch a POST response to Hyperbridge\\n\\t *\\n\\t * @notice Payment for the request can be made with either the native token or the IIsmpHost.feeToken.\\n\\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\\n\\t * Will revert if enough native tokens are not provided.\\n\\t *\\n\\t * If no native tokens are provided then it will try to collect payment from the calling contract in\\n\\t * the IIsmpHost.feeToken.\\n\\t *\\n\\t * @param response - post response\\n\\t * @return commitment - the request commitment\\n\\t */\\n\\tfunction dispatch(DispatchPostResponse memory response) external payable returns (bytes32 commitment);\\n\\n\\t/**\\n\\t * @dev Increase the relayer fee for a previously dispatched request.\\n\\t * This is provided for use only on pending requests, such that when they timeout,\\n\\t * the user can recover the entire relayer fee.\\n\\t *\\n\\t * @notice Payment can be made with either the native token or the IIsmpHost.feeToken.\\n\\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\\n\\t * Will revert if enough native tokens are not provided.\\n\\t *\\n\\t * If no native tokens are provided then it will try to collect payment from the calling contract in\\n\\t * the IIsmpHost.feeToken.\\n\\t *\\n\\t * If called on an already delivered request, these funds will be seen as a donation to the hyperbridge protocol.\\n\\t * @param commitment - The request commitment\\n\\t * @param amount - The amount provided in `IIsmpHost.feeToken()`\\n\\t */\\n\\tfunction fundRequest(bytes32 commitment, uint256 amount) external payable;\\n\\n\\t/**\\n\\t * @dev Increase the relayer fee for a previously dispatched response.\\n\\t * This is provided for use only on pending responses, such that when they timeout,\\n\\t * the user can recover the entire relayer fee.\\n\\t *\\n\\t * @notice Payment can be made with either the native token or the IIsmpHost.feeToken.\\n\\t * If native tokens are supplied, it will perform a swap under the hood using the local uniswap router.\\n\\t * Will revert if enough native tokens are not provided.\\n\\t *\\n\\t * If no native tokens are provided then it will try to collect payment from the calling contract in\\n\\t * the IIsmpHost.feeToken.\\n\\t *\\n\\t * If called on an already delivered response, these funds will be seen as a donation to the hyperbridge protocol.\\n\\t * @param commitment - The response commitment\\n\\t * @param amount - The amount to be provided in `IIsmpHost.feeToken()`\\n\\t */\\n\\tfunction fundResponse(bytes32 commitment, uint256 amount) external payable;\\n}\\n\",\"keccak256\":\"0xe297b5279a6932b58226067464bf50e3c2b85058e8c57e079fa2f86125e28501\",\"license\":\"Apache-2.0\"},\"@polytope-labs/ismp-solidity/interfaces/IIsmpModule.sol\":{\"content\":\"// Copyright (C) Polytope Labs Ltd.\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n// \\thttp://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\npragma solidity ^0.8.17;\\n\\nimport {PostRequest, PostResponse, GetResponse, GetRequest} from \\\"./Message.sol\\\";\\nimport {DispatchPost, DispatchPostResponse, DispatchGet, IDispatcher} from \\\"./IDispatcher.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct IncomingPostRequest {\\n\\t// The Post request\\n\\tPostRequest request;\\n\\t// Relayer responsible for delivering the request\\n\\taddress relayer;\\n}\\n\\nstruct IncomingPostResponse {\\n\\t// The Post response\\n\\tPostResponse response;\\n\\t// Relayer responsible for delivering the response\\n\\taddress relayer;\\n}\\n\\nstruct IncomingGetResponse {\\n\\t// The Get response\\n\\tGetResponse response;\\n\\t// Relayer responsible for delivering the response\\n\\taddress relayer;\\n}\\n\\ninterface IIsmpModule {\\n\\t/**\\n\\t * @dev Called by the `IsmpHost` to notify a module of a new request the module may choose to respond immediately, or in a later block\\n\\t * @param incoming post request\\n\\t */\\n\\tfunction onAccept(IncomingPostRequest memory incoming) external;\\n\\n\\t/**\\n\\t * @dev Called by the `IsmpHost` to notify a module of a post response to a previously sent out request\\n\\t * @param incoming post response\\n\\t */\\n\\tfunction onPostResponse(IncomingPostResponse memory incoming) external;\\n\\n\\t/**\\n\\t * @dev Called by the `IsmpHost` to notify a module of a get response to a previously sent out request\\n\\t * @param incoming get response\\n\\t */\\n\\tfunction onGetResponse(IncomingGetResponse memory incoming) external;\\n\\n\\t/**\\n\\t * @dev Called by the `IsmpHost` to notify a module of post requests that were previously sent but have now timed-out\\n\\t * @param request post request\\n\\t */\\n\\tfunction onPostRequestTimeout(PostRequest memory request) external;\\n\\n\\t/**\\n\\t * @dev Called by the `IsmpHost` to notify a module of post requests that were previously sent but have now timed-out\\n\\t * @param request post request\\n\\t */\\n\\tfunction onPostResponseTimeout(PostResponse memory request) external;\\n\\n\\t/**\\n\\t * @dev Called by the `IsmpHost` to notify a module of get requests that were previously sent but have now timed-out\\n\\t * @param request get request\\n\\t */\\n\\tfunction onGetTimeout(GetRequest memory request) external;\\n}\\n\\n// @notice Abstract contract to make implementing `IIsmpModule` easier.\\nabstract contract BaseIsmpModule is IIsmpModule {\\n\\t// @notice Call was not expected\\n\\terror UnexpectedCall();\\n\\n\\t// @notice Account is unauthorized\\n\\terror UnauthorizedCall();\\n\\n\\t// @dev restricts caller to the local `IsmpHost`\\n\\tmodifier onlyHost() {\\n\\t\\tif (msg.sender != host()) revert UnauthorizedCall();\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\taddress hostAddr = host();\\n\\t\\tif (hostAddr != address(0)) {\\n\\t\\t\\t// approve the host infintely\\n\\t\\t\\tIERC20(IDispatcher(hostAddr).feeToken()).approve(hostAddr, type(uint256).max);\\n\\t\\t}\\n\\t}\\n\\n\\t// @dev Returns the `IsmpHost` address for the current chain.\\n\\t// The `IsmpHost` is an immutable contract that will never change.\\n\\tfunction host() public view returns (address h) {\\n\\t\\tassembly {\\n\\t\\t\\tswitch chainid()\\n\\t\\t\\t// Ethereum Sepolia\\n\\t\\t\\tcase 11155111 {\\n\\t\\t\\t\\th := 0x2EdB74C269948b60ec1000040E104cef0eABaae8\\n\\t\\t\\t}\\n\\t\\t\\t// Arbitrum Sepolia\\n\\t\\t\\tcase 421614 {\\n\\t\\t\\t\\th := 0x3435bD7e5895356535459D6087D1eB982DAd90e7\\n\\t\\t\\t}\\n\\t\\t\\t// Optimism Sepolia\\n\\t\\t\\tcase 11155420 {\\n\\t\\t\\t\\th := 0x6d51b678836d8060d980605d2999eF211809f3C2\\n\\t\\t\\t}\\n\\t\\t\\t// Base Sepolia\\n\\t\\t\\tcase 84532 {\\n\\t\\t\\t\\th := 0xD198c01839dd4843918617AfD1e4DDf44Cc3BB4a\\n\\t\\t\\t}\\n\\t\\t\\t// Binance Smart Chain Testnet\\n\\t\\t\\tcase 97 {\\n\\t\\t\\t\\th := 0x8Aa0Dea6D675d785A882967Bf38183f6117C09b7\\n\\t\\t\\t}\\n\\t\\t\\t// Gnosis Chiado Testnet\\n\\t\\t\\tcase 10200 {\\n\\t\\t\\t\\th := 0x58A41B89F4871725E5D898d98eF4BF917601c5eB\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t// @dev returns the quoted fee for a dispatch\\n\\tfunction quote(DispatchPost memory post) public view returns (uint256) {\\n\\t\\treturn post.fee + (post.body.length * IDispatcher(host()).perByteFee(post.dest));\\n\\t}\\n\\n\\t// @dev returns the quoted fee for a dispatch\\n\\tfunction quote(DispatchPostResponse memory res) public view returns (uint256) {\\n\\t\\treturn res.fee + (res.response.length * IDispatcher(host()).perByteFee(res.request.source));\\n\\t}\\n\\n\\tfunction onAccept(IncomingPostRequest calldata) external virtual onlyHost {\\n\\t\\trevert UnexpectedCall();\\n\\t}\\n\\n\\tfunction onPostRequestTimeout(PostRequest memory) external virtual onlyHost {\\n\\t\\trevert UnexpectedCall();\\n\\t}\\n\\n\\tfunction onPostResponse(IncomingPostResponse memory) external virtual onlyHost {\\n\\t\\trevert UnexpectedCall();\\n\\t}\\n\\n\\tfunction onPostResponseTimeout(PostResponse memory) external virtual onlyHost {\\n\\t\\trevert UnexpectedCall();\\n\\t}\\n\\n\\tfunction onGetResponse(IncomingGetResponse memory) external virtual onlyHost {\\n\\t\\trevert UnexpectedCall();\\n\\t}\\n\\n\\tfunction onGetTimeout(GetRequest memory) external virtual onlyHost {\\n\\t\\trevert UnexpectedCall();\\n\\t}\\n}\\n\",\"keccak256\":\"0x738e69368f9ebdbcbcd523434cca2214d15888e7531e6755e93647bc27026121\",\"license\":\"Apache-2.0\"},\"@polytope-labs/ismp-solidity/interfaces/Message.sol\":{\"content\":\"// Copyright (C) Polytope Labs Ltd.\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n// \\thttp://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\npragma solidity ^0.8.17;\\n\\nimport {StorageValue} from \\\"@polytope-labs/solidity-merkle-trees/src/Types.sol\\\";\\n\\n// Identifies some state machine height. We allow for a state machine identifier here\\n// as some consensus clients may track multiple, concurrent state machines.\\nstruct StateMachineHeight {\\n\\t// the state machine identifier\\n\\tuint256 stateMachineId;\\n\\t// height of this state machine\\n\\tuint256 height;\\n}\\n\\nstruct PostRequest {\\n\\t// the source state machine of this request\\n\\tbytes source;\\n\\t// the destination state machine of this request\\n\\tbytes dest;\\n\\t// request nonce\\n\\tuint64 nonce;\\n\\t// Module Id of this request origin\\n\\tbytes from;\\n\\t// destination module id\\n\\tbytes to;\\n\\t// timestamp by which this request times out.\\n\\tuint64 timeoutTimestamp;\\n\\t// request body\\n\\tbytes body;\\n}\\n\\nstruct GetRequest {\\n\\t// the source state machine of this request\\n\\tbytes source;\\n\\t// the destination state machine of this request\\n\\tbytes dest;\\n\\t// request nonce\\n\\tuint64 nonce;\\n\\t// Module Id of this request origin\\n\\taddress from;\\n\\t// timestamp by which this request times out.\\n\\tuint64 timeoutTimestamp;\\n\\t// Storage keys to read.\\n\\tbytes[] keys;\\n\\t// height at which to read destination state machine\\n\\tuint64 height;\\n\\t// Some application-specific metadata relating to this request\\n\\tbytes context;\\n}\\n\\nstruct GetResponse {\\n\\t// The request that initiated this response\\n\\tGetRequest request;\\n\\t// storage values for get response\\n\\tStorageValue[] values;\\n}\\n\\nstruct PostResponse {\\n\\t// The request that initiated this response\\n\\tPostRequest request;\\n\\t// bytes for post response\\n\\tbytes response;\\n\\t// timestamp by which this response times out.\\n\\tuint64 timeoutTimestamp;\\n}\\n\\n// A post request as a leaf in a merkle tree\\nstruct PostRequestLeaf {\\n\\t// The request\\n\\tPostRequest request;\\n\\t// It's index in the mmr leaves\\n\\tuint256 index;\\n\\t// it's k-index\\n\\tuint256 kIndex;\\n}\\n\\n// A post response as a leaf in a merkle tree\\nstruct PostResponseLeaf {\\n\\t// The response\\n\\tPostResponse response;\\n\\t// It's index in the mmr leaves\\n\\tuint256 index;\\n\\t// it's k-index\\n\\tuint256 kIndex;\\n}\\n\\n// A get response as a leaf in a merkle mountain range tree\\nstruct GetResponseLeaf {\\n\\t// The response\\n\\tGetResponse response;\\n\\t// It's index in the mmr leaves\\n\\tuint256 index;\\n\\t// it's k-index\\n\\tuint256 kIndex;\\n}\\n\\n// A merkle mountain range proof.\\nstruct Proof {\\n\\t// height of the state machine\\n\\tStateMachineHeight height;\\n\\t// the multi-proof\\n\\tbytes32[] multiproof;\\n\\t// The total number of leaves in the mmr for this proof.\\n\\tuint256 leafCount;\\n}\\n\\n// A message for handling incoming requests\\nstruct PostRequestMessage {\\n\\t// proof for the requests\\n\\tProof proof;\\n\\t// The requests, contained in the merkle mountain range tree\\n\\tPostRequestLeaf[] requests;\\n}\\n\\n// A message for handling incoming GET responses\\nstruct GetResponseMessage {\\n\\t// proof for the responses\\n\\tProof proof;\\n\\t// The responses, contained in the merkle mountain range tree\\n\\tGetResponseLeaf[] responses;\\n}\\n\\nstruct GetTimeoutMessage {\\n\\t// requests which have timed-out\\n\\tGetRequest[] timeouts;\\n\\t// the height of the state machine proof\\n\\tStateMachineHeight height;\\n\\t// non-membership proof of the requests\\n\\tbytes[] proof;\\n}\\n\\nstruct PostRequestTimeoutMessage {\\n\\t// requests which have timed-out\\n\\tPostRequest[] timeouts;\\n\\t// the height of the state machine proof\\n\\tStateMachineHeight height;\\n\\t// non-membership proof of the requests\\n\\tbytes[] proof;\\n}\\n\\nstruct PostResponseTimeoutMessage {\\n\\t// responses which have timed-out\\n\\tPostResponse[] timeouts;\\n\\t// the height of the state machine proof\\n\\tStateMachineHeight height;\\n\\t// non-membership proof of the requests\\n\\tbytes[] proof;\\n}\\n\\n// A message for handling incoming responses\\nstruct PostResponseMessage {\\n\\t// proof for the responses\\n\\tProof proof;\\n\\t// the responses, contained in a merkle tree leaf\\n\\tPostResponseLeaf[] responses;\\n}\\n\\nlibrary Message {\\n\\t/**\\n\\t * @dev Calculates the absolute timeout value for a PostRequest\\n\\t */\\n\\tfunction timeout(PostRequest memory req) internal pure returns (uint64) {\\n\\t\\tif (req.timeoutTimestamp == 0) {\\n\\t\\t\\treturn type(uint64).max;\\n\\t\\t} else {\\n\\t\\t\\treturn req.timeoutTimestamp;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the absolute timeout value for a GetRequest\\n\\t */\\n\\tfunction timeout(GetRequest memory req) internal pure returns (uint64) {\\n\\t\\tif (req.timeoutTimestamp == 0) {\\n\\t\\t\\treturn type(uint64).max;\\n\\t\\t} else {\\n\\t\\t\\treturn req.timeoutTimestamp;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the absolute timeout value for a PostResponse\\n\\t */\\n\\tfunction timeout(PostResponse memory res) internal pure returns (uint64) {\\n\\t\\tif (res.timeoutTimestamp == 0) {\\n\\t\\t\\treturn type(uint64).max;\\n\\t\\t} else {\\n\\t\\t\\treturn res.timeoutTimestamp;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Encode the given post request for commitment\\n\\t */\\n\\tfunction encode(PostRequest memory req) internal pure returns (bytes memory) {\\n\\t\\treturn abi.encodePacked(req.source, req.dest, req.nonce, req.timeoutTimestamp, req.from, req.to, req.body);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Encode the given get request for commitment\\n\\t */\\n\\tfunction encode(GetRequest memory req) internal pure returns (bytes memory) {\\n\\t\\tbytes memory keysEncoding = bytes(\\\"\\\");\\n\\t\\tuint256 len = req.keys.length;\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\tkeysEncoding = bytes.concat(keysEncoding, req.keys[i]);\\n\\t\\t}\\n\\n\\t\\treturn\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\treq.source,\\n\\t\\t\\t\\treq.dest,\\n\\t\\t\\t\\treq.nonce,\\n\\t\\t\\t\\treq.height,\\n\\t\\t\\t\\treq.timeoutTimestamp,\\n\\t\\t\\t\\tabi.encodePacked(req.from),\\n\\t\\t\\t\\tkeysEncoding,\\n\\t\\t\\t\\treq.context\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the commitment for the given post response\\n\\t */\\n\\tfunction hash(PostResponse memory res) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(bytes.concat(encode(res.request), abi.encodePacked(res.response, res.timeoutTimestamp)));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the commitment for the given post request\\n\\t */\\n\\tfunction hash(PostRequest memory req) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(encode(req));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the commitment for the given get request\\n\\t */\\n\\tfunction hash(GetRequest memory req) internal pure returns (bytes32) {\\n\\t\\treturn keccak256(encode(req));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the commitment for the given get response\\n\\t */\\n\\tfunction hash(GetResponse memory res) internal pure returns (bytes32) {\\n\\t\\tbytes memory response = bytes(\\\"\\\");\\n\\t\\tuint256 len = res.values.length;\\n\\t\\tfor (uint256 i = 0; i < len; i++) {\\n\\t\\t\\tresponse = bytes.concat(response, bytes.concat(res.values[i].key, res.values[i].value));\\n\\t\\t}\\n\\t\\treturn keccak256(bytes.concat(encode(res.request), response));\\n\\t}\\n}\\n\",\"keccak256\":\"0x6d958ac157c23b1b4944a39a61246fa67da61bf697a8230f82e5246c82f30751\",\"license\":\"Apache-2.0\"},\"@polytope-labs/solidity-merkle-trees/src/Types.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\n// SPDX-License-Identifier: Apache2\\n\\n// Outcome of a successfully verified merkle-patricia proof\\nstruct StorageValue {\\n    // the storage key\\n    bytes key;\\n    // the encoded value\\n    bytes value;\\n}\\n\\n/// @title A representation of a Merkle tree node\\nstruct Node {\\n    // Distance of the node to the leftmost node\\n    uint256 k_index;\\n    // A hash of the node itself\\n    bytes32 node;\\n}\\n\\n/// @title A representation of a MerkleMountainRange leaf\\nstruct MmrLeaf {\\n    // the leftmost index of a node\\n    uint256 k_index;\\n    // The position in the tree\\n    uint256 leaf_index;\\n    // The hash of the position in the tree\\n    bytes32 hash;\\n}\\n\\nstruct Iterator {\\n    uint256 offset;\\n    bytes32[] data;\\n}\\n\",\"keccak256\":\"0x02d8395b46f33e9ad4a85275e31519035129fa01905a26cdf8d88512f1ae4ec5\",\"license\":\"Apache2\"},\"contracts/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport \\\"@polytope-labs/ismp-solidity/interfaces/IIsmpModule.sol\\\";\\nimport \\\"@polytope-labs/ismp-solidity/interfaces/IDispatcher.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {StorageValue} from \\\"@polytope-labs/solidity-merkle-trees/src/Types.sol\\\";\\n\\ncontract Oracle is IIsmpModule {\\n\\n     event PostReceived(PostResponse response);\\n     event onAcceptTest(PostRequest request);\\n     event onAcceptTest1(string body);\\n     event MessageReceived(address token, uint256 tokenAmount, uint256 vtokenAmount);\\n\\n    function getPrice() public view returns (uint256) {\\n        return 1000;\\n    }\\n\\n    function onAccept(IncomingPostRequest memory incoming) external override {\\n        bytes memory body = incoming.request.body;\\n        (address token, uint256 tokenAmount, uint256 vtokenAmount) = abi.decode(body, (address, uint256, uint256));\\n        emit MessageReceived(token, tokenAmount, vtokenAmount);\\n        // emit onAcceptTest1(string(incoming.request.body));\\n    }\\n\\n    function onPostResponse(IncomingPostResponse memory incoming) external override {\\n        //  bytes memory body = incoming.response.request.body;\\n        // (address token, uint256 tokenAmount, uint256 vtokenAmount) = abi.decode(body, (address, uint256, uint256));\\n        // emit MessageReceived(token, tokenAmount, vtokenAmount);\\n        emit PostReceived(incoming.response);\\n    }\\n\\n    function onGetResponse(IncomingGetResponse memory) external override {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function onPostRequestTimeout(PostRequest memory) external override {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function onPostResponseTimeout(PostResponse memory) external override {\\n        revert(\\\"Not implemented\\\");\\n    }\\n\\n    function onGetTimeout(GetRequest memory) external override {\\n        revert(\\\"Not implemented\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf24e8cee5c06fc99ea9a31cdeea97c0cdb0c5fa69ea70878d5c27cbdc2087994\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610b8d806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806398d5fdca1161005b57806398d5fdca146100b8578063b2a01bf5146100cd578063bc0dd447146100e0578063d0fff366146100ee57600080fd5b80630bc37bab146100825780630fee32ce1461009757806344ab20f8146100aa575b600080fd5b6100956100903660046104c7565b6100fc565b005b6100956100a5366004610526565b61013a565b610095610090366004610758565b6103e860405190815260200160405180910390f35b6100956100db366004610900565b6101b5565b610095610090366004610960565b610095610090366004610994565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b5c1b195b595b9d1959608a1b604482015260640160405180910390fd5b805160c0015180516000908190819061015c90850160209081019086016109c8565b604080516001600160a01b03851681526020810184905290810182905292955090935091507fa0710dea945adf87839bda230ecbb319aa3ed42ea2c02ae9dd696b4dc3d5762e9060600160405180910390a15050505050565b80516040517f8c2538167bc23dea378897a0739fde7e81fc423bfc4e8ffa86d9e07b66fd93d9916101e591610a45565b60405180910390a150565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715610228576102286101f0565b60405290565b604080519081016001600160401b0381118282101715610228576102286101f0565b60405161010081016001600160401b0381118282101715610228576102286101f0565b604051601f8201601f191681016001600160401b038111828210171561029b5761029b6101f0565b604052919050565b600082601f8301126102b457600080fd5b81356001600160401b038111156102cd576102cd6101f0565b6102e0601f8201601f1916602001610273565b8181528460208386010111156102f557600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160401b038116811461032957600080fd5b919050565b600060e0828403121561034057600080fd5b610348610206565b905081356001600160401b038082111561036157600080fd5b61036d858386016102a3565b8352602084013591508082111561038357600080fd5b61038f858386016102a3565b60208401526103a060408501610312565b604084015260608401359150808211156103b957600080fd5b6103c5858386016102a3565b606084015260808401359150808211156103de57600080fd5b6103ea858386016102a3565b60808401526103fb60a08501610312565b60a084015260c084013591508082111561041457600080fd5b50610421848285016102a3565b60c08301525092915050565b60006060828403121561043f57600080fd5b604051606081016001600160401b038282108183111715610462576104626101f0565b81604052829350843591508082111561047a57600080fd5b6104868683870161032e565b8352602085013591508082111561049c57600080fd5b506104a9858286016102a3565b6020830152506104bb60408401610312565b60408201525092915050565b6000602082840312156104d957600080fd5b81356001600160401b038111156104ef57600080fd5b6104fb8482850161042d565b949350505050565b6001600160a01b038116811461051857600080fd5b50565b803561032981610503565b60006020828403121561053857600080fd5b81356001600160401b038082111561054f57600080fd5b908301906040828603121561056357600080fd5b61056b61022e565b82358281111561057a57600080fd5b6105868782860161032e565b8252506020830135925061059983610503565b6020810192909252509392505050565b60006001600160401b038211156105c2576105c26101f0565b5060051b60200190565b600082601f8301126105dd57600080fd5b813560206105f26105ed836105a9565b610273565b82815260059290921b8401810191818101908684111561061157600080fd5b8286015b848110156106505780356001600160401b038111156106345760008081fd5b6106428986838b01016102a3565b845250918301918301610615565b509695505050505050565b6000610100828403121561066e57600080fd5b610676610250565b905081356001600160401b038082111561068f57600080fd5b61069b858386016102a3565b835260208401359150808211156106b157600080fd5b6106bd858386016102a3565b60208401526106ce60408501610312565b60408401526106df6060850161051b565b60608401526106f060808501610312565b608084015260a084013591508082111561070957600080fd5b610715858386016105cc565b60a084015261072660c08501610312565b60c084015260e084013591508082111561073f57600080fd5b5061074c848285016102a3565b60e08301525092915050565b60006020828403121561076a57600080fd5b6001600160401b03808335111561078057600080fd5b823583016040818603121561079457600080fd5b61079c61022e565b82823511156107aa57600080fd5b81358201604081880312156107be57600080fd5b6107c661022e565b84823511156107d457600080fd5b6107e1888335840161065b565b815284602083013511156107f457600080fd5b60208201358201915087601f83011261080c57600080fd5b6108196105ed83356105a9565b82358082526020808301929160051b8501018a81111561083857600080fd5b602085015b818110156108d757888135111561085357600080fd5b803586016040818e03601f1901121561086b57600080fd5b61087361022e565b8a6020830135111561088457600080fd5b6108968e6020808501358501016102a3565b81528a604083013511156108a957600080fd5b6108bc8e602060408501358501016102a3565b6020820152808652505060208401935060208101905061083d565b5050806020840152505080835250506108f26020830161051b565b602082015295945050505050565b60006020828403121561091257600080fd5b81356001600160401b038082111561092957600080fd5b908301906040828603121561093d57600080fd5b61094561022e565b82358281111561095457600080fd5b6105868782860161042d565b60006020828403121561097257600080fd5b81356001600160401b0381111561098857600080fd5b6104fb8482850161032e565b6000602082840312156109a657600080fd5b81356001600160401b038111156109bc57600080fd5b6104fb8482850161065b565b6000806000606084860312156109dd57600080fd5b83516109e881610503565b602085015160409095015190969495509392505050565b6000815180845260005b81811015610a2557602081850181015186830182015201610a09565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160606020840152805160e06080850152610a6b6101608501826109ff565b90506020820151607f19808684030160a0870152610a8983836109ff565b92506001600160401b0360408501511660c087015260608401519150808684030160e0870152610ab983836109ff565b9250608084015191508086840301610100870152610ad783836109ff565b925060a08401519150610af66101208701836001600160401b03169052565b60c0840151935080868403016101408701525050610b1481836109ff565b9150506020840151601f19848303016040850152610b3282826109ff565b9150506040840151610b4f60608501826001600160401b03169052565b50939250505056fea264697066735822122083338731038a2caf59497c6644a059011bd495d9a9983004e3a09213b20acbea64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806398d5fdca1161005b57806398d5fdca146100b8578063b2a01bf5146100cd578063bc0dd447146100e0578063d0fff366146100ee57600080fd5b80630bc37bab146100825780630fee32ce1461009757806344ab20f8146100aa575b600080fd5b6100956100903660046104c7565b6100fc565b005b6100956100a5366004610526565b61013a565b610095610090366004610758565b6103e860405190815260200160405180910390f35b6100956100db366004610900565b6101b5565b610095610090366004610960565b610095610090366004610994565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081a5b5c1b195b595b9d1959608a1b604482015260640160405180910390fd5b805160c0015180516000908190819061015c90850160209081019086016109c8565b604080516001600160a01b03851681526020810184905290810182905292955090935091507fa0710dea945adf87839bda230ecbb319aa3ed42ea2c02ae9dd696b4dc3d5762e9060600160405180910390a15050505050565b80516040517f8c2538167bc23dea378897a0739fde7e81fc423bfc4e8ffa86d9e07b66fd93d9916101e591610a45565b60405180910390a150565b634e487b7160e01b600052604160045260246000fd5b60405160e081016001600160401b0381118282101715610228576102286101f0565b60405290565b604080519081016001600160401b0381118282101715610228576102286101f0565b60405161010081016001600160401b0381118282101715610228576102286101f0565b604051601f8201601f191681016001600160401b038111828210171561029b5761029b6101f0565b604052919050565b600082601f8301126102b457600080fd5b81356001600160401b038111156102cd576102cd6101f0565b6102e0601f8201601f1916602001610273565b8181528460208386010111156102f557600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160401b038116811461032957600080fd5b919050565b600060e0828403121561034057600080fd5b610348610206565b905081356001600160401b038082111561036157600080fd5b61036d858386016102a3565b8352602084013591508082111561038357600080fd5b61038f858386016102a3565b60208401526103a060408501610312565b604084015260608401359150808211156103b957600080fd5b6103c5858386016102a3565b606084015260808401359150808211156103de57600080fd5b6103ea858386016102a3565b60808401526103fb60a08501610312565b60a084015260c084013591508082111561041457600080fd5b50610421848285016102a3565b60c08301525092915050565b60006060828403121561043f57600080fd5b604051606081016001600160401b038282108183111715610462576104626101f0565b81604052829350843591508082111561047a57600080fd5b6104868683870161032e565b8352602085013591508082111561049c57600080fd5b506104a9858286016102a3565b6020830152506104bb60408401610312565b60408201525092915050565b6000602082840312156104d957600080fd5b81356001600160401b038111156104ef57600080fd5b6104fb8482850161042d565b949350505050565b6001600160a01b038116811461051857600080fd5b50565b803561032981610503565b60006020828403121561053857600080fd5b81356001600160401b038082111561054f57600080fd5b908301906040828603121561056357600080fd5b61056b61022e565b82358281111561057a57600080fd5b6105868782860161032e565b8252506020830135925061059983610503565b6020810192909252509392505050565b60006001600160401b038211156105c2576105c26101f0565b5060051b60200190565b600082601f8301126105dd57600080fd5b813560206105f26105ed836105a9565b610273565b82815260059290921b8401810191818101908684111561061157600080fd5b8286015b848110156106505780356001600160401b038111156106345760008081fd5b6106428986838b01016102a3565b845250918301918301610615565b509695505050505050565b6000610100828403121561066e57600080fd5b610676610250565b905081356001600160401b038082111561068f57600080fd5b61069b858386016102a3565b835260208401359150808211156106b157600080fd5b6106bd858386016102a3565b60208401526106ce60408501610312565b60408401526106df6060850161051b565b60608401526106f060808501610312565b608084015260a084013591508082111561070957600080fd5b610715858386016105cc565b60a084015261072660c08501610312565b60c084015260e084013591508082111561073f57600080fd5b5061074c848285016102a3565b60e08301525092915050565b60006020828403121561076a57600080fd5b6001600160401b03808335111561078057600080fd5b823583016040818603121561079457600080fd5b61079c61022e565b82823511156107aa57600080fd5b81358201604081880312156107be57600080fd5b6107c661022e565b84823511156107d457600080fd5b6107e1888335840161065b565b815284602083013511156107f457600080fd5b60208201358201915087601f83011261080c57600080fd5b6108196105ed83356105a9565b82358082526020808301929160051b8501018a81111561083857600080fd5b602085015b818110156108d757888135111561085357600080fd5b803586016040818e03601f1901121561086b57600080fd5b61087361022e565b8a6020830135111561088457600080fd5b6108968e6020808501358501016102a3565b81528a604083013511156108a957600080fd5b6108bc8e602060408501358501016102a3565b6020820152808652505060208401935060208101905061083d565b5050806020840152505080835250506108f26020830161051b565b602082015295945050505050565b60006020828403121561091257600080fd5b81356001600160401b038082111561092957600080fd5b908301906040828603121561093d57600080fd5b61094561022e565b82358281111561095457600080fd5b6105868782860161042d565b60006020828403121561097257600080fd5b81356001600160401b0381111561098857600080fd5b6104fb8482850161032e565b6000602082840312156109a657600080fd5b81356001600160401b038111156109bc57600080fd5b6104fb8482850161065b565b6000806000606084860312156109dd57600080fd5b83516109e881610503565b602085015160409095015190969495509392505050565b6000815180845260005b81811015610a2557602081850181015186830182015201610a09565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000825160606020840152805160e06080850152610a6b6101608501826109ff565b90506020820151607f19808684030160a0870152610a8983836109ff565b92506001600160401b0360408501511660c087015260608401519150808684030160e0870152610ab983836109ff565b9250608084015191508086840301610100870152610ad783836109ff565b925060a08401519150610af66101208701836001600160401b03169052565b60c0840151935080868403016101408701525050610b1481836109ff565b9150506020840151601f19848303016040850152610b3282826109ff565b9150506040840151610b4f60608501826001600160401b03169052565b50939250505056fea264697066735822122083338731038a2caf59497c6644a059011bd495d9a9983004e3a09213b20acbea64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onAccept(((bytes,bytes,uint64,bytes,bytes,uint64,bytes),address))": {
        "details": "Called by the `IsmpHost` to notify a module of a new request the module may choose to respond immediately, or in a later block",
        "params": {
          "incoming": "post request"
        }
      },
      "onPostResponse((((bytes,bytes,uint64,bytes,bytes,uint64,bytes),bytes,uint64),address))": {
        "details": "Called by the `IsmpHost` to notify a module of a post response to a previously sent out request",
        "params": {
          "incoming": "post response"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}